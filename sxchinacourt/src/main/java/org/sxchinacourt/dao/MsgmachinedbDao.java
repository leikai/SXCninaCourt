package org.sxchinacourt.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MSGMACHINEDB".
*/
public class MsgmachinedbDao extends AbstractDao<Msgmachinedb, Long> {

    public static final String TABLENAME = "MSGMACHINEDB";

    /**
     * Properties of entity Msgmachinedb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AnswerId = new Property(1, String.class, "answerId", false, "ANSWERID");
        public final static Property AnswerTime = new Property(2, String.class, "answerTime", false, "ANSWERTIME");
        public final static Property AnswerType = new Property(3, String.class, "answerType", false, "ANSWERTYPE");
        public final static Property Del_flag = new Property(4, String.class, "del_flag", false, "DELFLAG");
        public final static Property FilePath = new Property(5, String.class, "filePath", false, "FILEPATH");
        public final static Property Flag = new Property(6, String.class, "flag", false, "FLAG");
        public final static Property IdNumber = new Property(7, String.class, "idNumber", false, "IDNUMBER");
        public final static Property JudgeId = new Property(8, String.class, "judgeId", false, "JUDGEID");
        public final static Property JudgeName = new Property(9, String.class, "judgeName", false, "JUDGENAME");
        public final static Property Oid = new Property(10, String.class, "oid", false, "OID");
        public final static Property PersonName = new Property(11, String.class, "personName", false, "PERSONNAME");
        public final static Property Phone_flag = new Property(12, String.class, "phone_flag", false, "PHONEFLAG");
        public final static Property TextContent = new Property(13, String.class, "textContent", false, "TEXTCONTENT");
    }


    public MsgmachinedbDao(DaoConfig config) {
        super(config);
    }
    
    public MsgmachinedbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MSGMACHINEDB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ANSWERID\" TEXT," + // 1: answerId
                "\"ANSWERTIME\" TEXT," + // 2: answerTime
                "\"ANSWERTYPE\" TEXT," + // 3: answerType
                "\"DELFLAG\" TEXT," + // 4: del_flag
                "\"FILEPATH\" TEXT," + // 5: filePath
                "\"FLAG\" TEXT," + // 6: flag
                "\"IDNUMBER\" TEXT," + // 7: idNumber
                "\"JUDGEID\" TEXT," + // 8: judgeId
                "\"JUDGENAME\" TEXT," + // 9: judgeName
                "\"OID\" TEXT," + // 10: oid
                "\"PERSONNAME\" TEXT," + // 11: personName
                "\"PHONEFLAG\" TEXT," + // 12: phone_flag
                "\"TEXTCONTENT\" TEXT);"); // 13: textContent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MSGMACHINEDB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Msgmachinedb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String answerId = entity.getAnswerId();
        if (answerId != null) {
            stmt.bindString(2, answerId);
        }
 
        String answerTime = entity.getAnswerTime();
        if (answerTime != null) {
            stmt.bindString(3, answerTime);
        }
 
        String answerType = entity.getAnswerType();
        if (answerType != null) {
            stmt.bindString(4, answerType);
        }
 
        String del_flag = entity.getDel_flag();
        if (del_flag != null) {
            stmt.bindString(5, del_flag);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(6, filePath);
        }
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(7, flag);
        }
 
        String idNumber = entity.getIdNumber();
        if (idNumber != null) {
            stmt.bindString(8, idNumber);
        }
 
        String judgeId = entity.getJudgeId();
        if (judgeId != null) {
            stmt.bindString(9, judgeId);
        }
 
        String judgeName = entity.getJudgeName();
        if (judgeName != null) {
            stmt.bindString(10, judgeName);
        }
 
        String oid = entity.getOid();
        if (oid != null) {
            stmt.bindString(11, oid);
        }
 
        String personName = entity.getPersonName();
        if (personName != null) {
            stmt.bindString(12, personName);
        }
 
        String phone_flag = entity.getPhone_flag();
        if (phone_flag != null) {
            stmt.bindString(13, phone_flag);
        }
 
        String textContent = entity.getTextContent();
        if (textContent != null) {
            stmt.bindString(14, textContent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Msgmachinedb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String answerId = entity.getAnswerId();
        if (answerId != null) {
            stmt.bindString(2, answerId);
        }
 
        String answerTime = entity.getAnswerTime();
        if (answerTime != null) {
            stmt.bindString(3, answerTime);
        }
 
        String answerType = entity.getAnswerType();
        if (answerType != null) {
            stmt.bindString(4, answerType);
        }
 
        String del_flag = entity.getDel_flag();
        if (del_flag != null) {
            stmt.bindString(5, del_flag);
        }
 
        String filePath = entity.getFilePath();
        if (filePath != null) {
            stmt.bindString(6, filePath);
        }
 
        String flag = entity.getFlag();
        if (flag != null) {
            stmt.bindString(7, flag);
        }
 
        String idNumber = entity.getIdNumber();
        if (idNumber != null) {
            stmt.bindString(8, idNumber);
        }
 
        String judgeId = entity.getJudgeId();
        if (judgeId != null) {
            stmt.bindString(9, judgeId);
        }
 
        String judgeName = entity.getJudgeName();
        if (judgeName != null) {
            stmt.bindString(10, judgeName);
        }
 
        String oid = entity.getOid();
        if (oid != null) {
            stmt.bindString(11, oid);
        }
 
        String personName = entity.getPersonName();
        if (personName != null) {
            stmt.bindString(12, personName);
        }
 
        String phone_flag = entity.getPhone_flag();
        if (phone_flag != null) {
            stmt.bindString(13, phone_flag);
        }
 
        String textContent = entity.getTextContent();
        if (textContent != null) {
            stmt.bindString(14, textContent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Msgmachinedb readEntity(Cursor cursor, int offset) {
        Msgmachinedb entity = new Msgmachinedb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // answerId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // answerTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // answerType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // del_flag
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // filePath
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // flag
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // idNumber
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // judgeId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // judgeName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // oid
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // personName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // phone_flag
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // textContent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Msgmachinedb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAnswerId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAnswerTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAnswerType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDel_flag(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setFilePath(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFlag(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIdNumber(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setJudgeId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setJudgeName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOid(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPersonName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPhone_flag(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTextContent(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Msgmachinedb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Msgmachinedb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Msgmachinedb entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
